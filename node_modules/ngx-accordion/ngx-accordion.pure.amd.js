define("ngx-accordion/Accordion", ["require", "exports", "@angular/core", "ngx-accordion/AccordionGroup"], function (require, exports, core_1, AccordionGroup_1) {
    var Accordion = (function () {
        function Accordion() {
            this.closeOthers = true;
            this.showArrows = false;
            this.expandAll = false;
        }
        Accordion.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.expandAll) {
                this.closeOthers = false;
                this.oldGroups = this.groups.toArray();
                this.oldGroups.forEach(function (group) {
                    group.openOnInitialization();
                });
                // we subscribe for changes, and if new groups are added we open them automatically
                this.subscription = this.groups.changes.subscribe(function (change) {
                    var newGroups = _this.groups.toArray().filter(function (group) {
                        return _this.oldGroups.indexOf(group) === -1;
                    });
                    newGroups.forEach(function (group) {
                        group.openOnInitialization();
                    });
                    _this.oldGroups = _this.groups.toArray();
                });
            }
        };
        Accordion.prototype.ngOnDestroy = function () {
            if (this.subscription)
                this.subscription.unsubscribe();
        };
        Accordion.prototype.closeAll = function () {
            this.groups.toArray().forEach(function (group) {
                group.isOpened = false;
            });
        };
        return Accordion;
    }());
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], Accordion.prototype, "closeOthers", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], Accordion.prototype, "showArrows", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], Accordion.prototype, "expandAll", void 0);
    __decorate([
        core_1.ContentChildren(core_1.forwardRef(function () { return AccordionGroup_1.AccordionGroup; })),
        __metadata("design:type", core_1.QueryList)
    ], Accordion.prototype, "groups", void 0);
    Accordion = __decorate([
        core_1.Component({
            selector: "accordion",
            template: "\n<div class=\"panel-group\" role=\"tablist\" aria-multiselectable=\"true\">\n    <ng-content></ng-content>\n</div>\n"
        })
    ], Accordion);
    exports.Accordion = Accordion;
});
define("ngx-accordion/AccordionToggle", ["require", "exports", "@angular/core", "ngx-accordion/AccordionGroup"], function (require, exports, core_2, AccordionGroup_2) {
    var AccordionToggle = (function () {
        function AccordionToggle(accordionGroup) {
            this.accordionGroup = accordionGroup;
        }
        AccordionToggle.prototype.onClick = function () {
            this.accordionGroup.toggle();
        };
        return AccordionToggle;
    }());
    __decorate([
        core_2.HostListener("click"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], AccordionToggle.prototype, "onClick", null);
    AccordionToggle = __decorate([
        core_2.Component({
            selector: "accordion-toggle",
            template: "<ng-content></ng-content>"
        }),
        __param(0, core_2.Host()), __param(0, core_2.Inject(core_2.forwardRef(function () { return AccordionGroup_2.AccordionGroup; }))),
        __metadata("design:paramtypes", [AccordionGroup_2.AccordionGroup])
    ], AccordionToggle);
    exports.AccordionToggle = AccordionToggle;
});
define("ngx-accordion/AccordionGroup", ["require", "exports", "@angular/core", "ngx-accordion/Accordion", "ngx-accordion/AccordionToggle"], function (require, exports, core_3, Accordion_1, AccordionToggle_1) {
    var AccordionGroup = (function () {
        function AccordionGroup(accordion, cdr) {
            this.accordion = accordion;
            this.cdr = cdr;
            this.isOpened = false;
            this.onOpen = new core_3.EventEmitter();
            this.onClose = new core_3.EventEmitter();
            this.onToggle = new core_3.EventEmitter();
            this.disabled = false;
        }
        AccordionGroup.prototype.checkAndToggle = function () {
            // if custom toggle element is supplied, then do nothing, custom toggler will take care of it
            if (this.toggler)
                return;
            this.toggle();
        };
        AccordionGroup.prototype.toggle = function () {
            if (this.disabled)
                return;
            var isOpenedBeforeWeChange = this.isOpened;
            if (this.accordion.closeOthers)
                this.accordion.closeAll();
            this.isOpened = !isOpenedBeforeWeChange;
            if (this.isOpened) {
                this.onOpen.emit();
            }
            else {
                this.onClose.emit();
            }
            this.onToggle.emit(this.isOpened);
        };
        AccordionGroup.prototype.openOnInitialization = function () {
            this.isOpened = true;
            this.cdr.detectChanges();
        };
        return AccordionGroup;
    }());
    __decorate([
        core_3.Input(),
        __metadata("design:type", String)
    ], AccordionGroup.prototype, "heading", void 0);
    __decorate([
        core_3.Input(),
        __metadata("design:type", Boolean)
    ], AccordionGroup.prototype, "isOpened", void 0);
    __decorate([
        core_3.Output(),
        __metadata("design:type", Object)
    ], AccordionGroup.prototype, "onOpen", void 0);
    __decorate([
        core_3.Output(),
        __metadata("design:type", Object)
    ], AccordionGroup.prototype, "onClose", void 0);
    __decorate([
        core_3.Output(),
        __metadata("design:type", Object)
    ], AccordionGroup.prototype, "onToggle", void 0);
    __decorate([
        core_3.ContentChild(AccordionToggle_1.AccordionToggle),
        __metadata("design:type", core_3.ElementRef)
    ], AccordionGroup.prototype, "toggler", void 0);
    __decorate([
        core_3.Input(),
        __metadata("design:type", Boolean)
    ], AccordionGroup.prototype, "disabled", void 0);
    AccordionGroup = __decorate([
        core_3.Component({
            selector: "accordion-group",
            template: "\n  <div class=\"panel panel-default\" [class.dropup]=\"isOpened\" [class.disabled]=\"disabled\">\n    <div class=\"panel-heading\" role=\"tab\" (click)=\"checkAndToggle()\">\n      <h4 class=\"panel-title\">\n        <a *ngIf=\"heading\" role=\"button\" data-toggle=\"collapse\" [attr.aria-expanded]=\"isOpened\">\n            {{ heading }}\n        </a>\n        <ng-content select=\"accordion-heading\"></ng-content>\n        <div class=\"caret\" [style.display]=\"accordion.showArrows ? '' : 'none'\">\n        </div>\n      </h4>\n    </div>\n    <div *ngIf=\"isOpened\" class=\"panel-collapse collapse in\" role=\"tabpanel\" [attr.aria-labelledby]=\"heading\">\n      <div class=\"panel-body\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n"
        }),
        __param(0, core_3.Host()), __param(0, core_3.Inject(core_3.forwardRef(function () { return Accordion_1.Accordion; }))),
        __metadata("design:paramtypes", [Accordion_1.Accordion,
            core_3.ChangeDetectorRef])
    ], AccordionGroup);
    exports.AccordionGroup = AccordionGroup;
});
define("ngx-accordion/AccordionHeading", ["require", "exports", "@angular/core"], function (require, exports, core_4) {
    var AccordionHeading = (function () {
        function AccordionHeading() {
        }
        return AccordionHeading;
    }());
    AccordionHeading = __decorate([
        core_4.Component({
            selector: "accordion-heading",
            template: "<ng-content></ng-content>"
        })
    ], AccordionHeading);
    exports.AccordionHeading = AccordionHeading;
});
define("ngx-accordion/index", ["require", "exports", "@angular/core", "@angular/common", "ngx-accordion/AccordionGroup", "ngx-accordion/Accordion", "ngx-accordion/AccordionToggle", "ngx-accordion/AccordionHeading", "ngx-accordion/Accordion", "ngx-accordion/AccordionGroup", "ngx-accordion/AccordionToggle", "ngx-accordion/AccordionHeading"], function (require, exports, core_5, common_1, AccordionGroup_3, Accordion_2, AccordionToggle_2, AccordionHeading_1, Accordion_3, AccordionGroup_4, AccordionToggle_3, AccordionHeading_2) {
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export(Accordion_3);
    __export(AccordionGroup_4);
    __export(AccordionToggle_3);
    __export(AccordionHeading_2);
    var AccordionModule = (function () {
        function AccordionModule() {
        }
        return AccordionModule;
    }());
    AccordionModule = __decorate([
        core_5.NgModule({
            imports: [
                common_1.CommonModule
            ],
            declarations: [
                Accordion_2.Accordion,
                AccordionGroup_3.AccordionGroup,
                AccordionToggle_2.AccordionToggle,
                AccordionHeading_1.AccordionHeading
            ],
            exports: [
                Accordion_2.Accordion,
                AccordionGroup_3.AccordionGroup,
                AccordionToggle_2.AccordionToggle,
                AccordionHeading_1.AccordionHeading
            ]
        })
    ], AccordionModule);
    exports.AccordionModule = AccordionModule;
});
define("ngx-accordion", ["require", "exports", "ngx-accordion/index"], function (require, exports, index_1) {
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export(index_1);
});
